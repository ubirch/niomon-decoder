package com.ubirch.decoding

import java.io.ByteArrayInputStream
import java.util.{Base64, UUID}

import com.typesafe.config.ConfigFactory
import com.typesafe.scalalogging.StrictLogging
import com.ubirch.client.protocol.DefaultProtocolVerifier
import com.ubirch.client.util.curveFromString
import com.ubirch.crypto.{GeneratorKeyFactory, PubKey}
import com.ubirch.niomon.base.{NioMicroservice, NioMicroserviceMock}
import com.ubirch.kafka.RichAnyProducerRecord
import javax.xml.bind.DatatypeConverter
import org.apache.commons.codec.binary.Hex
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.serialization.{ByteArrayDeserializer, ByteArraySerializer}
import org.json4s.Formats
import org.json4s.jackson.JsonMethods.parse
import org.scalatest.{FlatSpec, Matchers}


class RoutingTest extends FlatSpec with Matchers with StrictLogging {

  implicit val formats: Formats = com.ubirch.kafka.formats

  implicit val bytesSerializer: ByteArraySerializer = new ByteArraySerializer
  implicit val byteDeserializer: ByteArrayDeserializer = new ByteArrayDeserializer

  private val v2HardwareId = "6eac4d0b-16e6-4508-8c46-22e7451ea5a1"
  private val v2MsgPackHex = "9522c4106eac4d0b16e645088c4622e7451ea5a100c4206b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4bc440bc2a01322c679b9648a9391704e992c041053404aafcdab08fc4ce54a57eb16876d741918d01219abf2dc7913f2d9d49439d350f11d05cdb3f85972ac95c45fc"

  private val v1HardwareId = "946ba755-e132-4680-a380-7be395eb8ccd"
  private val v1MsgPackHex = "9613b0946ba755e1324680a3807be395eb8ccdda004001d3c78a7bc8738cbabee96ae86651c89aa81252dee0e7c7f3457324202aae9c3d16332d3d7ecde72fa26801a081b6347148bae6ab22b8830c360d78d0b63f0e00a50102030405da0040b30fa8a898282878862e15ed871f6618043fb7c2400daed1bdf7bad5c790edd5b011d248be2ee04bc086b02bd9c337b981eeaff1eefca47d346132ab4cfd8006"

  private val trackleHardwareId = "7aa42ea9-f981-91a6-9b9c-b14aacabce54"
  private val trackleMsgPack = ""

  private val trackleHardwareId2 = "d3f2b9b1-2990-c662-a7fa-95d6edc3a6be"
  private val trackleMsgPack2 = ""

  private val keyServerClient = (c: NioMicroservice.Context) => new CachingUbirchKeyService(c) {

    private val eddsaKey = GeneratorKeyFactory.getPubKey(
      "55f0feac4f2bcf879330eff348422ab3abf5237a24acaf0aef3bb876045c4e532fbd6cd8e265f6cf28b46e7e4512cd06ba84bcd3300efdadf28750f43dafd771",
      curveFromString("ecdsa-p256v1")
    )

    private val waldisKey = GeneratorKeyFactory.getPubKey(
      Base64.getDecoder.decode("7odnHwchQA6AAk8AZzCQevnWM2PT4Jg+MSxVDf7wGsU="),
      curveFromString("ECC_ED25519")
    )

    private val trackleKey = GeneratorKeyFactory.getPubKey(
      Base64.getDecoder.decode("Lujc3SSchaqzGn/wDZWzmRfwVgdCZBoW6QkLT7N1700="),
      curveFromString("ECC_ED25519")
    )


    private val trackleKey2 = GeneratorKeyFactory.getPubKey(
      Base64.getDecoder.decode("GYbn+t0zb6yva8eDo29IoHqXF+lHtWSPhyJ+TY4MU00="),
      curveFromString("ECC_ED25519")
    )

    override def getPublicKey(uuid: UUID): List[PubKey] = {
      uuid.toString match {
        case id if id == v2HardwareId => List(eddsaKey)
        case id if id == v1HardwareId => List(waldisKey)
        case id if id == trackleHardwareId => List(trackleKey)
        case id if id == trackleHardwareId2 => List(trackleKey2)
        case _ => Nil
      }
    }
  }

  private val microservice = NioMicroserviceMock(MessageDecodingMicroservice(c => new DefaultProtocolVerifier(keyServerClient(c))))
  microservice.outputTopics = Map("valid" -> "valid")
  microservice.errorTopic = Some("invalid")
  microservice.config = ConfigFactory.load().getConfig("niomon-decoder")
  microservice.name = "niomon-decoder"

  import microservice.kafkaMocks._

  "MessageDecodingMicroservice.Routing" should "be routed to 'valid' queue when msgpackv2 with valid signature" in {
    val binary = DatatypeConverter.parseHexBinary(v2MsgPackHex)
    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary)
      .withExtraHeaders("X-Ubirch-Hardware-Id".toLowerCase -> v2HardwareId)
      .withRequestIdHeader()("foo")

    publishToKafka(record)

    val validTopicEnvelopes = consumeNumberMessagesFrom("valid", 1, autoCommit = true)
    validTopicEnvelopes.size should be(1)

    val approvedMessage = validTopicEnvelopes.head
    val msg = parse(new ByteArrayInputStream(approvedMessage)) \ "ubirchPacket"
    (msg \ "signed").extract[String] should equal("lSLEEG6sTQsW5kUIjEYi50UepaEAxCBrhrJz/zT84Z1rgE7/Wj9XR62k6qIvHUnAHlLdt4dbSw==")
    (msg \ "version").extract[Int] should be(34)
    (msg \ "hint").extract[Int] should be(0x00)
    (msg \ "uuid").extract[String] should equal(v2HardwareId)
    (msg \ "payload").extract[String] should be("a4ayc/80/OGda4BO/1o/V0etpOqiLx1JwB5S3beHW0s=")
  }

  it should "be routed to 'valid' queue when msgpackv1 has valid signature" in {
    val binary = Hex.decodeHex(v1MsgPackHex)
    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary)
      .withExtraHeaders("X-Ubirch-Hardware-Id".toLowerCase -> v1HardwareId)
      .withRequestIdHeader()("foo")

    publishToKafka(record)

    val validTopicEnvelopes = consumeNumberMessagesFrom("valid", 1, autoCommit = true)
    validTopicEnvelopes.size should be(1)

    val approvedMessage = validTopicEnvelopes.head
    val msg = parse(new ByteArrayInputStream(approvedMessage)) \ "ubirchPacket"
    (msg \ "signed").extract[String] should equal("lhOwlGunVeEyRoCjgHvjleuMzdoAQAHTx4p7yHOMur7pauhmUciaqBJS3uDnx/NFcyQgKq6cPRYzLT1+zecvomgBoIG2NHFIuuarIriDDDYNeNC2Pw4ApQECAwQF")
    (msg \ "version").extract[Int] should be(35)
    (msg \ "hint").extract[Int] should be(0x00)
    (msg \ "uuid").extract[String] should equal(v1HardwareId)
    (msg \ "payload").extract[String] should be("AQIDBAU=")

  }

  it should "be routed to 'invalid' queue when msgpackv1 has invalid upp" in {
    val binary = DatatypeConverter.parseHexBinary(v1MsgPackHex).reverse.tail.reverse
    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary)
      .withExtraHeaders("X-Ubirch-Hardware-Id".toLowerCase -> v1HardwareId)
      .withRequestIdHeader()("foo")

    publishToKafka(record)

    val invalidTopicEnvelopes = consumeNumberStringMessagesFrom("invalid", 1, autoCommit = true)
    invalidTopicEnvelopes.size should be(1)

    val rejectedMessage = invalidTopicEnvelopes.head
    rejectedMessage should equal("""{"error":"IllegalArgumentException: Invalid parts for verification","causes":[],"microservice":"niomon-decoder","requestId":"foo"}""")
  }

  it should "be routed to 'invalid' queue when msgpackv1 has invalid signature" in {
    val binary = DatatypeConverter.parseHexBinary(v1MsgPackHex).dropRight(1) ++ Array(7.toByte)

    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary)
      .withExtraHeaders("X-Ubirch-Hardware-Id".toLowerCase -> v1HardwareId) // Wrong uuid
      .withRequestIdHeader()("foo")

    publishToKafka(record)

    val invalidTopicEnvelopes = consumeNumberStringMessagesFrom("invalid", 1, autoCommit = true)
    invalidTopicEnvelopes.size should be(1)

    val rejectedMessage = invalidTopicEnvelopes.head
    rejectedMessage should equal("""{"error":"SignatureException: Invalid signature","causes":[],"microservice":"niomon-decoder","requestId":"foo"}""")
  }

  it should "be routed to 'invalid' queue when no hwDeviceId in the header is found" in {
    val binary = DatatypeConverter.parseHexBinary(v1MsgPackHex + "12")
    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary).withRequestIdHeader()("foo")
    publishToKafka(record)

    val invalidTopicEnvelopes = consumeNumberMessagesFrom("invalid", 1, autoCommit = true)
    invalidTopicEnvelopes.size should be(1)

    val rejectedMessage: Array[Byte] = invalidTopicEnvelopes.head
    rejectedMessage.map(_.toChar).mkString should equal("{\"error\":\"NoSuchElementException: Header with key x-ubirch-hardware-id is missing. Cannot verify msgpack.\",\"causes\":[],\"microservice\":\"niomon-decoder\",\"requestId\":\"foo\"}")
  }

  it should "be routed to 'valid' queue when trackleMsg has valid signature" in {
    val binary = DatatypeConverter.parseHexBinary(trackleMsgPack)
    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary)
      .withExtraHeaders("X-Ubirch-Hardware-Id".toLowerCase -> trackleHardwareId)
      .withRequestIdHeader()("foo")

    publishToKafka(record)

    val validTopicEnvelopes = consumeNumberMessagesFrom("valid", 1, autoCommit = true)
    validTopicEnvelopes.size should be(1)

    val approvedMessage = validTopicEnvelopes.head
    val msg = parse(new ByteArrayInputStream(approvedMessage)) \ "ubirchPacket"
    (msg \ "signed").extract[String] should equal("ls0AE7B6pC6p+YGRppucsUqsq85U2gBAhjrxoe1dEFFWareYlzR7Nrhs8lU++4UJoT5EAnbjMnZT+dAqCaspBIA9/WtjKXLxELMgkPOnBlkgVMWteSzhAlSV2gAjdjEuMC4yLVBST0QtMjAxODAzMjYxMDMyMDUgKHY1LjYuNinNFaoD3gHtzl67BevNDmrOXrsGJ80Oas5euwZjzQ5qzl67Bp/NDmrOXrsG280Oac5euwcXzQ5pzl67B1PNDmjOXrsHj80Oac5euwfLzQ5nzl67CAfNDmXOXrsIQ80OZM5euwh/zQ5kzl67CLvNDmTOXrsI980OYc5euwkzzQ5fzl67CW/NDl/OXrsJq80OXc5euwnnzQ5ezl67CiPNDl7OXrsKX80OXM5euwqbzQ5bzl67CtfNDlnOXrsLE80OV85euwtPzQ5Vzl67C4vNDlTOXrsLx80OVc5euwwDzQ5Tzl67DD/NDlXOXrsMe80OVs5euwy3zQ5Uzl67DPPNDlLOXrsNL80OUs5euw1rzQ5Szl67DafNDlXOXrsN480OVs5euw4fzQ5Uzl67DlvNDlTOXrsOl80OVM5euw7TzQ5Uzl67Dw/NDlbOXrsPS80OVM5euw+HzQ5Wzl67D8PNDlbOXrsP/80OV85euxA7zQ5Xzl67EHfNDlnOXrsQs80OV85euxDvzQ5Vzl67ESvNDlfOXrsRZ80OVs5euxGjzQ5Xzl67Ed/NDlXOXrsSG80OVs5euxJXzQ5Vzl67EpPNDlbOXrsSz80OVM5euxMLzQ5Szl67E0fNDlLOXrsTg80OUs5euxO/zQ5Szl67E/vNDlTOXrsUN80OVM5euxRzzQ5Uzl67FK/NDlTOXrsU680OU85euxUnzQ5Uzl67FWPNDlLOXrsVn80OUs5euxXbzQ5Rzl67FhfNDlTOXrsWU80OUs5euxaPzQ5Szl67FsvNDlLOXrsXB80OUs5euxdDzQ5Rzl67F3/NDlLOXrsXu80OUc5euxf3zQ5Szl67GDPNDlPOXrsYb80OVc5euxirzQ5Szl67GOfNDlTOXrsZI80OU85euxlfzQ5Szl67GZvNDlPOXrsZ180OVM5euxoTzQ5Vzl67Gk/NDlTOXrsai80OVM5euxrHzQ5Tzl67GwPNDlXOXrsbP80OU85euxt7zQ5Uzl67G7fNDlPOXrsb880OVs5euxwvzQ5Tzl67HGvNDlXOXrscp80OVs5euxzjzQ5Zzl67HR/NDlnOXrsdW80OV85eux2XzQ5Wzl67HdPNDlTOXrseD80OV85eux5LzQ5Zzl67HofNDlbOXrsew80OVs5eux7/zQ5Wzl67HzvNDlnOXrsfd80OVs5eux+zzQ5Zzl67H+/NDlnOXrsgK80OV85euyBnzQ5azl67IKPNDlvOXrsg380OWs5euyEbzQ5azl67IVfNDlzOXrshk80OW85euyHPzQ5bzl67IgvNDlvOXrsiR80OXc5euyKDzQ5dzl67Ir/NDlzOXrsi+80OW85euyM3zQ5Zzl67I3PNDlvOXrsjr80OXM5euyPrzQ5czl67JCfNDlzOXrskY80OXc5euySfzQ5dzl67JNvNDl3OXrslF80OXc5euyVTzQ5ezl67JY/NDmDOXrsly80OX85euyYHzQ5fzl67JkPNDl/OXrsmf80OXs5euya7zQ5ezl67JvfNDl3OXrsnM80OX85euydvzQ5hzl67J6vNDmHOXrsn580OXs5euygjzQ5fzl67KF/NDmHOXrsom80OYs5euyjXzQ5izl67KRPNDmDOXrspT80OYs5euymLzQ5izl67KcfNDmLOXrsqA80OYc5euyo/zQ5izl67KnvNDmPOXrsqt80OYs5euyrzzQ5jzl67Ky/NDmTOXrsra80OYs5euyunzQ5kzl67K+PNDmTOXrssH80OY85euyxbzQ5kzl67LJfNDmfOXrss080OZc5euy0PzQ5kzl67LUvNDmjOXrsth80OaM5euy3DzQ5nzl67Lf/NDmjOXrsuO80OaM5euy53zQ5pzl67LrPNDmnOXrsu780Oac5euy8rzQ5pzl67L2fNDmzOXrsvo80Oa85euy/fzQ5rzl67MBvNDmzOXrswV80Obc5euzCTzQ5szl67MM/NDm3OXrsxC80Obs5euzFHzQ5vzl67MYPNDm7OXrsxv80Ob85euzH7zQ5tzl67MjfNDm/OXrsyc80Ob85euzKvzQ5vzl67MuvNDm/OXrszJ80Obs5euzNjzQ5vzl67M5/NDm/OXrsz280Obs5euzQXzQ5vzl67NFPNDm3OXrs0j80Obs5euzTLzQ5vzl67NQfNDm/OXrs1Q80Ob85euzV/zQ5yzl67NbvNDnLOXrs1980OcM5euzYzzQ5vzl67Nm/NDnDOXrs2q80OcM5euzbnzQ5xzl67NyPNDnHOXrs3X80Occ5euzebzQ5yzl67N9fNDnTOXrs4E80Occ5euzhPzQ5zzl67OIvNDnTOXrs4x80OdM5euzkDzQ5zzl67OT/NDnLOXrs5e80OcM5euzm3zQ5yzl67OfPNDnLOXrs6L80Occ5euzprzQ50zl67OqfNDm/OXrs6480Ocs5euzsfzQ5wzl67O1vNDnHOXrs7l80Occ5euzvTzQ5wzl67PA/NDm/OXrs8S80Ob85euzyHzQ5uzl67PMPNDmzOXrs8/80ObM5euz07zQ5szl67PXfNDm7OXrs9s80Oa85euz3vzQ5qzl67PivNDm3OXrs+Z80Oac5euz6jzQ5pzl67Pt/NDmrOXrs/G80Oac5euz9XzQ5qzl67P5PNDmfOXrs/z80OZ85eu0ALzQ5nzl67QEfNDmPOXrtAg80OZM5eu0C/zQ5izl67QPvNDmLOXrtBN80OY85eu0FzzQ5izl67Qa/NDmLOXrtB680OYc5eu0InzQ5ezl67QmPNDl/OXrtCn80OX85eu0LbzQ5gzl67QxfNDl7OXrtDU80OXc5eu0OPzQ5czl67Q8vNDlvOXrtEB80OW85eu0RDzQ5azl67RH/NDlvOXrtEu80OXM5eu0T3zQ5czl67RTPNDl3OXrtFb80OYM5eu0WrzQ5dzl67RefNDl7OXrtGI80OYM5eu0ZfzQ5ezl67RpvNDl3OXrtG180OXM5eu0cTzQ5fzl67R0/NDl/OXrtHi80OXs5eu0fHzQ5ezl67SAPNDl/OXrtIP80OYM5eu0h7zQ5fzl67SLfNDl7OXrtI880OXs5eu0kvzQ5ezl67SWvNDl7OXrtJp80OYM5eu0njzQ5gzl67Sh/NDl7OXrtKW80OX85eu0qXzQ5ezl67StPNDl7OXrtLD80OXs5eu0tLzQ5ezl67S4fNDl3OXrtLw80OXs5eu0v/zQ5fzl67TDvNDl7OXrtMd80OXc5eu0yzzQ5ezl67TO/NDl3OXrtNK80OYM5eu01nzQ5dzl67TaPNDl7OXrtN380OYM5eu04bzQ5ezl67TlfNDmDOXrtOk80OXc5eu07PzQ5ezl67TwvNDl7OXrtPR80OX85eu0+DzQ5ezl67T7/NDl/OXrtP/M0OXs5eu1A4zQ5ezl67UHTNDl7OXrtQsM0OXc5eu1DszQ5dzl67USjNDl7OXrtRZM0OXc5eu1GgzQ5ezl67UdzNDlzOXrtSGM0OXs5eu1JUzQ5ezl67UpDNDl3OXrtSzM0OXc5eu1MIzQ5ezl67U0TNDl3OXrtTgM0OXs5eu1O8zQ5ezl67U/jNDl7OXrtUNM0OXs5eu1RwzQ5dzl67VKzNDl7OXrtU6M0OXs5eu1UkzQ5dzl67VWDNDl7OXrtVnM0OXc5eu1XYzQ5ezl67VhTNDl3OXrtWUM0OXc5eu1aMzQ5fzl67VsjNDl7OXrtXBM0OXs5eu1dAzQ5czl67V3zNDl3OXrtXuM0OXs5eu1f0zQ5ezl67WDDNDlzOXrtYbM0OXc5eu1iozQ5czl67WOTNDl3OXrtZIM0OXc5eu1lczQ5ezl67WZjNDl/OXrtZ1M0OYM5eu1oQzQ5dzl67WkzNDlvOXrtaiM0OXc5eu1rEzQ5czl67WwDNDl3OXrtbPM0OXs5eu1t4zQ5ezl67W7TNDl3OXrtb8M0OXc5eu1wszQ5ezl67XGjNDl3OXrtcpM0OXc5eu1zgzQ5ezl67XRzNDl/OXrtdWM0OYc5eu12UzQ5gzl67XdDNDmHOXrteDM0OXs5eu15IzQ5fzl67XoTNDl7OXrtewM0OXc5eu178zQ5fzl67XzjNDl3OXrtfdM0OXs5eu1+wzQ5ezl67X+zNDmDOXrtgKM0OX85eu2BkzQ5hzl67YKDNDmHOXrtg3M0OYs5eu2EYzQ5izl67YVTNDmLOXrthkM0OZM5eu2HMzQ5izl67YgjNDmTOXrtiRM0OZc5eu2KAzQ5lzl67YrzNDmXOXrti+M0OZc5eu2M0zQ5nzl67Y3DNDmPOXrtjrM0OZc5eu2PozQ5jzl67ZCTNDmTOXrtkYM0OY85eu2SczQ5kzl67ZNjNDmTOXrtlFM0Oac5eu2VQzQ5lzl67ZYzNDmfOXrtlyM0OZc5eu2YEzQ5nzl67ZkDNDmfOXrtmfM0OZ85eu2a4zQ5nzl67ZvTNDmfOXrtnMM0OZ85eu2dszQ5nzl67Z6jNDmTOXrtn5M0OZM5eu2ggzQ5nzl67aFzNDmTOXrtomM0OZM5eu2jUzQ5nzl67aRDNDmXOXrtpTM0OZ85eu2mIzQ5ozl67acTNDmjOXrtqAM0OZ85eu2o8zQ5pzl67anjNDmjOXrtqtM0OZ85eu2rwzQ5ozl67ayzNDmjOXrtraM0OZ85eu2ukzQ5pzl67a+DNDmnOXrtsHM0Oac5eu2xYzQ5nzl67bJTNDmrOXrts0M0Oas5eu20MzQ5ozl67bUjNDmrOXrtthM0Oas5eu23AzQ5ozl67bfzNDmrOXrtuOM0Oac5eu250zQ5szl67brDNDmnOXrtu7M0Oa85eu28ozQ5rzl67b2TNDmnOXrtvoM0Oas5eu2/czQ5pzl67cBjNDmrOXrtwVM0Oas5eu3CQzQ5rzl67cMzNDmzOXrtxCM0ObM5eu3FEzQ5qzl67cYDNDmzOXrtxvM0Obs5eu3H4zQ5szl67cjTNDm3OXrtycM0Obs5eu3KszQ5vzl67cujNDm/OXrtzJM0ObM5eu3NgzQ5tzl67c5zNDmzOXrtz2M0Obs5eu3QUzQ5vzl67dFDNDm/OXrt0jM0Ob85eu3TIzQ5vzl67dQTNDm/OXrt1QM0Ob85eu3V8zQ5wzl67dbjNDm/OXrt19M0OcM5eu3YwzQ5wzl67dmzNDnHOXrt2qM0Ocs5eu3bkzQ5yzl67dyDNDnHOXrt3XM0Occ5eu3eYzQ5xzl67d9TNDnLOXrt4EM0Ocs5eu3hMzQ5xzl67eIjNDnDOXrt4xM0Occ5eu3kAzQ5wzl67eTzNDcWEo21pbs0NrKNtYXjNEGihac3qYKJpbM4AG3dA")
    (msg \ "version").extract[Int] should be(35)
    (msg \ "uuid").extract[String] should equal(trackleHardwareId)
  }

  it should "be routed to 'valid' queue when trackleMsg with valid signature 2" in {
    val binary = DatatypeConverter.parseHexBinary(trackleMsgPack2)
    val record = new ProducerRecord[String, Array[Byte]]("incoming", binary)
      .withExtraHeaders("X-Ubirch-Hardware-Id".toLowerCase -> trackleHardwareId2)
      .withRequestIdHeader()("foo")

    publishToKafka(record)

    val validTopicEnvelopes = consumeNumberMessagesFrom("valid", 1, autoCommit = true)
    validTopicEnvelopes.size should be(1)

    val approvedMessage = validTopicEnvelopes.head
    val msg = parse(new ByteArrayInputStream(approvedMessage)) \ "ubirchPacket"
    (msg \ "version").extract[Int] should be(35)
    (msg \ "uuid").extract[String] should equal(trackleHardwareId2)
  }

}
